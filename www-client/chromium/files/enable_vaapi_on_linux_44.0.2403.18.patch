diff --git a/content/common/gpu/media/gpu_video_decode_accelerator.cc b/content/common/gpu/media/gpu_video_decode_accelerator.cc
index c4d7eb9..03e29e3 100644
--- a/content/common/gpu/media/gpu_video_decode_accelerator.cc
+++ b/content/common/gpu/media/gpu_video_decode_accelerator.cc
@@ -33,7 +33,7 @@
 #include "content/common/gpu/media/dxva_video_decode_accelerator.h"
 #elif defined(OS_MACOSX)
 #include "content/common/gpu/media/vt_video_decode_accelerator.h"
-#elif defined(OS_CHROMEOS)
+#elif defined(OS_CHROMEOS) || defined(OS_LINUX)
 #if defined(USE_V4L2_CODEC)
 #include "content/common/gpu/media/v4l2_device.h"
 #include "content/common/gpu/media/v4l2_slice_video_decode_accelerator.h"
@@ -299,7 +299,7 @@ GpuVideoDecodeAccelerator::CreateDXVAVDA() {
 scoped_ptr<media::VideoDecodeAccelerator>
 GpuVideoDecodeAccelerator::CreateV4L2VDA() {
   scoped_ptr<media::VideoDecodeAccelerator> decoder;
-#if defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
   scoped_refptr<V4L2Device> device = V4L2Device::Create(V4L2Device::kDecoder);
   if (device.get()) {
     decoder.reset(new V4L2VideoDecodeAccelerator(
@@ -317,7 +317,7 @@ GpuVideoDecodeAccelerator::CreateV4L2VDA() {
 scoped_ptr<media::VideoDecodeAccelerator>
 GpuVideoDecodeAccelerator::CreateV4L2SliceVDA() {
   scoped_ptr<media::VideoDecodeAccelerator> decoder;
-#if defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
   scoped_refptr<V4L2Device> device = V4L2Device::Create(V4L2Device::kDecoder);
   if (device.get()) {
     decoder.reset(new V4L2SliceVideoDecodeAccelerator(
@@ -346,7 +346,7 @@ void GpuVideoDecodeAccelerator::BindImage(uint32 client_texture_id,
 scoped_ptr<media::VideoDecodeAccelerator>
 GpuVideoDecodeAccelerator::CreateVaapiVDA() {
   scoped_ptr<media::VideoDecodeAccelerator> decoder;
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(ARCH_CPU_X86_FAMILY)
   decoder.reset(new VaapiVideoDecodeAccelerator(
       make_context_current_, base::Bind(&GpuVideoDecodeAccelerator::BindImage,
                                         base::Unretained(this))));
@@ -400,7 +400,7 @@ GpuVideoDecodeAccelerator::GetSupportedProfiles() {
   // can be initialized by corresponding VDA successfully.
 #if defined(OS_WIN)
   profiles = DXVAVideoDecodeAccelerator::GetSupportedProfiles();
-#elif defined(OS_CHROMEOS)
+#elif defined(OS_CHROMEOS) || defined(OS_LINUX)
   media::VideoDecodeAccelerator::SupportedProfiles vda_profiles;
 #if defined(USE_V4L2_CODEC)
   vda_profiles = V4L2VideoDecodeAccelerator::GetSupportedProfiles();
diff --git a/content/common/gpu/media/gpu_video_encode_accelerator.cc b/content/common/gpu/media/gpu_video_encode_accelerator.cc
index 4dd875b..d24909e 100644
--- a/content/common/gpu/media/gpu_video_encode_accelerator.cc
+++ b/content/common/gpu/media/gpu_video_encode_accelerator.cc
@@ -19,7 +19,7 @@
 #include "media/base/limits.h"
 #include "media/base/video_frame.h"
 
-#if defined(OS_CHROMEOS)
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
 #if defined(USE_V4L2_CODEC)
 #include "content/common/gpu/media/v4l2_video_encode_accelerator.h"
 #endif
@@ -196,7 +196,7 @@ GpuVideoEncodeAccelerator::CreateVEAFps() {
 scoped_ptr<media::VideoEncodeAccelerator>
 GpuVideoEncodeAccelerator::CreateV4L2VEA() {
   scoped_ptr<media::VideoEncodeAccelerator> encoder;
-#if defined(OS_CHROMEOS) && defined(USE_V4L2_CODEC)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(USE_V4L2_CODEC)
   scoped_refptr<V4L2Device> device = V4L2Device::Create(V4L2Device::kEncoder);
   if (device)
     encoder.reset(new V4L2VideoEncodeAccelerator(device));
@@ -208,7 +208,7 @@ GpuVideoEncodeAccelerator::CreateV4L2VEA() {
 scoped_ptr<media::VideoEncodeAccelerator>
 GpuVideoEncodeAccelerator::CreateVaapiVEA() {
   scoped_ptr<media::VideoEncodeAccelerator> encoder;
-#if defined(OS_CHROMEOS) && defined(ARCH_CPU_X86_FAMILY)
+#if (defined(OS_CHROMEOS) || defined(OS_LINUX)) && defined(ARCH_CPU_X86_FAMILY)
   const base::CommandLine* cmd_line = base::CommandLine::ForCurrentProcess();
   if (!cmd_line->HasSwitch(switches::kDisableVaapiAcceleratedVideoEncode))
     encoder.reset(new VaapiVideoEncodeAccelerator());
diff --git a/content/content_common.gypi b/content/content_common.gypi
index c19df69..9ea1c0d 100644
--- a/content/content_common.gypi
+++ b/content/content_common.gypi
@@ -780,7 +780,7 @@
         '../third_party/libjingle/libjingle.gyp:libjingle',
       ],
     }],
-    ['use_v4lplugin==1 and chromeos==1', {
+    ['use_v4lplugin==1 and (chromeos==1 or desktop_linux==1)', {
       'defines': [
         'USE_LIBV4L2'
       ],
@@ -824,7 +824,7 @@
         },
       ],
     }],
-    ['chromeos==1', {
+    ['(chromeos==1 or desktop_linux==1)', {
       'sources': [
         'common/gpu/media/accelerated_video_decoder.h',
         'common/gpu/media/h264_decoder.cc',
@@ -837,7 +837,7 @@
         'common/gpu/media/vp8_picture.h',
       ],
     }],
-    ['chromeos==1 and use_v4l2_codec==1', {
+    ['(chromeos==1 or desktop_linux==1) and use_v4l2_codec==1', {
       'direct_dependent_settings': {
         'defines': [
           'USE_V4L2_CODEC'
@@ -867,13 +867,13 @@
         '<(DEPTH)/third_party/khronos',
       ],
     }],
-    ['target_arch == "arm" and chromeos == 1', {
+    ['target_arch == "arm" and (chromeos == 1 or desktop_linux == 1)', {
       'sources': [
         'common/gpu/media/tegra_v4l2_device.cc',
         'common/gpu/media/tegra_v4l2_device.h',
       ],
     }],
-    ['target_arch != "arm" and chromeos == 1', {
+    ['target_arch != "arm" and (chromeos == 1 or desktop_linux == 1)', {
       'dependencies': [
         '../media/media.gyp:media',
         '../third_party/libyuv/libyuv.gyp:libyuv',
diff --git a/content/content_gpu.gypi b/content/content_gpu.gypi
index 1c2121d..9dfb370 100644
--- a/content/content_gpu.gypi
+++ b/content/content_gpu.gypi
@@ -36,7 +36,7 @@
         ],
       },
     }],
-    ['target_arch!="arm" and chromeos == 1', {
+    ['target_arch!="arm" and (chromeos == 1 or desktop_linux == 1)', {
       'include_dirs': [
         '<(DEPTH)/third_party/libva',
       ],
diff --git a/content/content_tests.gypi b/content/content_tests.gypi
index fa04ec8..4020f30 100644
--- a/content/content_tests.gypi
+++ b/content/content_tests.gypi
@@ -1572,7 +1572,7 @@
         },
       ],
     }],
-    ['chromeos==1 or OS=="win" or OS=="android"', {
+    ['(chromeos==1 or desktop_linux==1) or OS=="win" or OS=="android"', {
       'targets': [
           {
             'target_name': 'video_decode_accelerator_unittest',
@@ -1640,7 +1640,7 @@
                   '../ui/gfx/x/gfx_x11.gyp:gfx_x11',
                 ],
               }],
-              ['use_ozone==1 and chromeos==1', {
+              ['use_ozone==1 and (chromeos==1 or desktop_linux == 1)', {
                 'dependencies': [
                   '../ui/display/display.gyp:display',  # Used by rendering_helper.cc
                   '../ui/ozone/ozone.gyp:ozone',  # Used by rendering_helper.cc
@@ -1652,7 +1652,7 @@
           },
         ]
     }],
-    ['chromeos==1 and target_arch != "arm"', {
+    ['(chromeos==1 or desktop_linux==1) and target_arch != "arm"', {
       'targets': [
           {
             'target_name': 'vaapi_jpeg_decoder_unittest',
@@ -1684,7 +1684,7 @@
           }
         ]
     }],
-    ['chromeos==1', {
+    ['chromeos==1 or desktop_linux==1', {
       'targets': [
         {
           'target_name': 'video_encode_accelerator_unittest',
diff --git a/content/public/common/content_switches.cc b/content/public/common/content_switches.cc
index e1affe9..72d6aea 100644
--- a/content/public/common/content_switches.cc
+++ b/content/public/common/content_switches.cc
@@ -960,7 +960,9 @@ const char kDisableWebAudio[]               = "disable-webaudio";
 #if defined(OS_CHROMEOS)
 // Disables panel fitting (used for mirror mode).
 const char kDisablePanelFitting[]           = "disable-panel-fitting";
+#endif
 
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
 // Disables VA-API accelerated video encode.
 const char kDisableVaapiAcceleratedVideoEncode[] =
     "disable-vaapi-accelerated-video-encode";
diff --git a/content/public/common/content_switches.h b/content/public/common/content_switches.h
index 1c19ccb..7685e07 100644
--- a/content/public/common/content_switches.h
+++ b/content/public/common/content_switches.h
@@ -274,6 +274,9 @@ CONTENT_EXPORT extern const char kDisableWebAudio[];
 
 #if defined(OS_CHROMEOS)
 CONTENT_EXPORT extern const char kDisablePanelFitting[];
+#endif
+
+#if defined(OS_CHROMEOS) || defined(OS_LINUX)
 CONTENT_EXPORT extern const char kDisableVaapiAcceleratedVideoEncode[];
 #endif
 
diff --git a/media/media.gyp b/media/media.gyp
index ed6aa66..2e3aa4f 100644
--- a/media/media.gyp
+++ b/media/media.gyp
@@ -705,7 +705,7 @@
           ],
         }],
         # For VaapiVideoEncodeAccelerator.
-        ['target_arch != "arm" and chromeos == 1', {
+        ['target_arch != "arm" and (chromeos == 1 or desktop_linux == 1)', {
           'sources': [
             'filters/h264_bitstream_buffer.cc',
             'filters/h264_bitstream_buffer.h',
@@ -1266,7 +1266,7 @@
             'player_android',
           ],
         }],
-        ['target_arch != "arm" and chromeos == 1 and use_x11 == 1', {
+        ['target_arch != "arm" and (chromeos == 1 or desktop_linux == 1) and use_x11 == 1', {
           'sources': [
             'filters/h264_bitstream_buffer_unittest.cc',
           ],
